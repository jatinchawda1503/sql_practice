
create table contacts
(
	contact_email varchar(255) not null,
	contact_first_name varchar(255),
	contact_last_name varchar(500),
	contact_address varchar(700),
	contact_city varchar(255),
	contact_country varchar(255),
	contact_birthdate date,
	primary key (contact_email)
);

create table populations
(
	population_code varchar(10) not null,
	population_year integer not null,
	population_period varchar(10) not null,
	primary key (population_code, population_year, population_period)
);

create table students
(
	student_epita_email varchar(255) not null,
	student_contact_ref varchar(255) not null,
	student_enrollment_status varchar(50) not null,
	student_population_period_ref varchar(10) not null,
	student_population_year_ref integer not null,
	student_population_code_ref varchar(5) not null,
	primary key (student_epita_email),
	FOREIGN KEY (student_contact_ref) REFERENCES contacts(contact_email),
	Foreign key (student_population_code_ref,student_population_year_ref,student_population_period_ref)
	references populations(population_code, population_year, population_period)
);




create table teachers
(
	teacher_contact_ref text,
	teacher_epita_email text not null,
	teacher_study_level integer,
	primary key (teacher_epita_email),
	foreign key (teacher_contact_ref) references contacts(contact_email)
);


create table courses
(
	course_code text not null,
	course_rev integer not null,
	duration integer,
	course_last_rev integer,
	course_name text,
	course_description text,
	primary key (course_code, course_rev)
);


create table exams
(
	exam_course_code text not null,
	exam_course_rev integer not null,
	exam_weight integer,
	exam_type text not null,
	primary key (exam_course_code, exam_course_rev, exam_type),
	foreign key (exam_course_code,exam_course_rev) references courses(course_code, course_rev)
);


create table programs
(
	program_course_code_ref text not null,
	program_course_rev_ref integer not null,
	program_assignment text not null,
	primary key (program_course_code_ref, program_course_rev_ref, program_assignment),
	foreign key (program_course_code_ref, program_course_rev_ref) references courses(course_code,course_rev)
);


create table sessions
(
	session_course_ref text not null,
	session_course_rev_ref integer not null,
	session_prof_ref text,
	session_date date not null,
	session_start_time text not null,
	session_end_time text not null,
	session_type text,
	session_population_year integer,
	session_population_period text,
	session_room text,
	primary key (session_course_ref, session_date, session_start_time, session_end_time),
	foreign key (session_course_ref,session_course_rev_ref) references courses(course_code,course_rev),
	foreign key (session_prof_ref) references teachers(teacher_epita_email),
	foreign key (session_course_ref,session_population_year,session_population_period)
	references populations(population_code, population_year, population_period)
);



create table attendance
(
	attendance_student_ref text,
	attendance_population_year_ref integer,
	attendance_course_ref text,
	attendance_course_rev integer,
	attendance_session_date_ref date,
	attendance_session_start_time text,
	attendance_session_end_time text,
	attendance_presence integer,
	foreign key (attendance_student_ref) references students(student_epita_email),
	foreign key (attendance_course_ref,attendance_course_rev) references courses(course_code,course_rev),
	foreign key (attendance_course_ref,attendance_session_date_ref,attendance_session_start_time,attendance_session_end_time)
	references sessions(session_course_ref, session_date, session_start_time, session_end_time)
);

create table grades
(
	grade_student_epita_email_ref text not null,
	grade_course_code_ref text not null,
	grade_course_rev_ref integer not null,
	grade_exam_type_ref text not null,
	grade_score integer,
	primary key (grade_student_epita_email_ref, grade_course_rev_ref, grade_course_code_ref, grade_exam_type_ref),
	foreign key (grade_student_epita_email_ref) references students(student_epita_email),
	foreign key (grade_course_code_ref,grade_course_rev_ref) references courses(course_code,course_rev)
);





